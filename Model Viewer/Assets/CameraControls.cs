//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.14.2
//     from Assets/CameraControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

/// <summary>
/// Provides programmatic access to <see cref="InputActionAsset" />, <see cref="InputActionMap" />, <see cref="InputAction" /> and <see cref="InputControlScheme" /> instances defined in asset "Assets/CameraControls.inputactions".
/// </summary>
/// <remarks>
/// This class is source generated and any manual edits will be discarded if the associated asset is reimported or modified.
/// </remarks>
/// <example>
/// <code>
/// using namespace UnityEngine;
/// using UnityEngine.InputSystem;
///
/// // Example of using an InputActionMap named "Player" from a UnityEngine.MonoBehaviour implementing callback interface.
/// public class Example : MonoBehaviour, MyActions.IPlayerActions
/// {
///     private MyActions_Actions m_Actions;                  // Source code representation of asset.
///     private MyActions_Actions.PlayerActions m_Player;     // Source code representation of action map.
///
///     void Awake()
///     {
///         m_Actions = new MyActions_Actions();              // Create asset object.
///         m_Player = m_Actions.Player;                      // Extract action map object.
///         m_Player.AddCallbacks(this);                      // Register callback interface IPlayerActions.
///     }
///
///     void OnDestroy()
///     {
///         m_Actions.Dispose();                              // Destroy asset object.
///     }
///
///     void OnEnable()
///     {
///         m_Player.Enable();                                // Enable all actions within map.
///     }
///
///     void OnDisable()
///     {
///         m_Player.Disable();                               // Disable all actions within map.
///     }
///
///     #region Interface implementation of MyActions.IPlayerActions
///
///     // Invoked when "Move" action is either started, performed or canceled.
///     public void OnMove(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnMove: {context.ReadValue&lt;Vector2&gt;()}");
///     }
///
///     // Invoked when "Attack" action is either started, performed or canceled.
///     public void OnAttack(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnAttack: {context.ReadValue&lt;float&gt;()}");
///     }
///
///     #endregion
/// }
/// </code>
/// </example>
public partial class @CameraControls: IInputActionCollection2, IDisposable
{
    /// <summary>
    /// Provides access to the underlying asset instance.
    /// </summary>
    public InputActionAsset asset { get; }

    /// <summary>
    /// Constructs a new instance.
    /// </summary>
    public @CameraControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""version"": 1,
    ""name"": ""CameraControls"",
    ""maps"": [
        {
            ""name"": ""Look"",
            ""id"": ""d6aa0b9a-3cce-4109-a8bd-b51bb263b4f6"",
            ""actions"": [
                {
                    ""name"": ""Mouse Delta"",
                    ""type"": ""Value"",
                    ""id"": ""67d05cb6-5895-4b24-8de3-4ac911be7a39"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""19d38aa1-1476-46d8-8e4b-3ab1573b2e5e"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouse Delta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Orbit"",
            ""id"": ""04122e87-2c49-49b8-ab69-0976ca22a044"",
            ""actions"": [
                {
                    ""name"": ""Right Click"",
                    ""type"": ""Button"",
                    ""id"": ""baceb0e6-0c16-46b1-8cbb-3e0fe4516f07"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""170a9d78-05f0-43be-a3f1-05f49614f8ac"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Zoom"",
            ""id"": ""ab3b984f-d542-4317-9107-70e7c2527e82"",
            ""actions"": [
                {
                    ""name"": ""Scroll"",
                    ""type"": ""Value"",
                    ""id"": ""e2f76eab-3b0c-4466-8320-1c652c5cc65f"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1d585719-2716-4083-b030-02ff7e030dc6"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Scroll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Pan"",
            ""id"": ""f0ee501f-bdb7-4b36-814e-1d720e8215f4"",
            ""actions"": [
                {
                    ""name"": ""Middle Click"",
                    ""type"": ""Button"",
                    ""id"": ""5d4199e2-2f1a-4941-a3c9-f69a905f485f"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e63758ff-125e-43ba-9d6d-17e01202e67c"",
                    ""path"": ""<Mouse>/middleButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Middle Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Recenter"",
            ""id"": ""1d4d227c-5031-4365-a327-43c5427dfe5b"",
            ""actions"": [
                {
                    ""name"": ""Space"",
                    ""type"": ""Button"",
                    ""id"": ""0b5d75a7-3454-4bd3-b707-f40255e8e96a"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""cc9ab9b9-53b9-4207-8e4c-4c261bd05c1e"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Space"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Select"",
            ""id"": ""3fb538ac-f96e-4012-94e6-36b204da284d"",
            ""actions"": [
                {
                    ""name"": ""Mouse Click"",
                    ""type"": ""Button"",
                    ""id"": ""a1800152-3ac6-48ef-a5dd-ace6dec85d33"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d8f48d55-92b3-49a0-91bf-63f0610b3edf"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouse Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Look
        m_Look = asset.FindActionMap("Look", throwIfNotFound: true);
        m_Look_MouseDelta = m_Look.FindAction("Mouse Delta", throwIfNotFound: true);
        // Orbit
        m_Orbit = asset.FindActionMap("Orbit", throwIfNotFound: true);
        m_Orbit_RightClick = m_Orbit.FindAction("Right Click", throwIfNotFound: true);
        // Zoom
        m_Zoom = asset.FindActionMap("Zoom", throwIfNotFound: true);
        m_Zoom_Scroll = m_Zoom.FindAction("Scroll", throwIfNotFound: true);
        // Pan
        m_Pan = asset.FindActionMap("Pan", throwIfNotFound: true);
        m_Pan_MiddleClick = m_Pan.FindAction("Middle Click", throwIfNotFound: true);
        // Recenter
        m_Recenter = asset.FindActionMap("Recenter", throwIfNotFound: true);
        m_Recenter_Space = m_Recenter.FindAction("Space", throwIfNotFound: true);
        // Select
        m_Select = asset.FindActionMap("Select", throwIfNotFound: true);
        m_Select_MouseClick = m_Select.FindAction("Mouse Click", throwIfNotFound: true);
    }

    ~@CameraControls()
    {
        UnityEngine.Debug.Assert(!m_Look.enabled, "This will cause a leak and performance issues, CameraControls.Look.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Orbit.enabled, "This will cause a leak and performance issues, CameraControls.Orbit.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Zoom.enabled, "This will cause a leak and performance issues, CameraControls.Zoom.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Pan.enabled, "This will cause a leak and performance issues, CameraControls.Pan.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Recenter.enabled, "This will cause a leak and performance issues, CameraControls.Recenter.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Select.enabled, "This will cause a leak and performance issues, CameraControls.Select.Disable() has not been called.");
    }

    /// <summary>
    /// Destroys this asset and all associated <see cref="InputAction"/> instances.
    /// </summary>
    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindingMask" />
    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.devices" />
    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.controlSchemes" />
    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Contains(InputAction)" />
    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.GetEnumerator()" />
    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    /// <inheritdoc cref="IEnumerable.GetEnumerator()" />
    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Enable()" />
    public void Enable()
    {
        asset.Enable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Disable()" />
    public void Disable()
    {
        asset.Disable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindings" />
    public IEnumerable<InputBinding> bindings => asset.bindings;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindAction(string, bool)" />
    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindBinding(InputBinding, out InputAction)" />
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Look
    private readonly InputActionMap m_Look;
    private List<ILookActions> m_LookActionsCallbackInterfaces = new List<ILookActions>();
    private readonly InputAction m_Look_MouseDelta;
    /// <summary>
    /// Provides access to input actions defined in input action map "Look".
    /// </summary>
    public struct LookActions
    {
        private @CameraControls m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public LookActions(@CameraControls wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "Look/MouseDelta".
        /// </summary>
        public InputAction @MouseDelta => m_Wrapper.m_Look_MouseDelta;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_Look; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="LookActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(LookActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="LookActions" />
        public void AddCallbacks(ILookActions instance)
        {
            if (instance == null || m_Wrapper.m_LookActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_LookActionsCallbackInterfaces.Add(instance);
            @MouseDelta.started += instance.OnMouseDelta;
            @MouseDelta.performed += instance.OnMouseDelta;
            @MouseDelta.canceled += instance.OnMouseDelta;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="LookActions" />
        private void UnregisterCallbacks(ILookActions instance)
        {
            @MouseDelta.started -= instance.OnMouseDelta;
            @MouseDelta.performed -= instance.OnMouseDelta;
            @MouseDelta.canceled -= instance.OnMouseDelta;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="LookActions.UnregisterCallbacks(ILookActions)" />.
        /// </summary>
        /// <seealso cref="LookActions.UnregisterCallbacks(ILookActions)" />
        public void RemoveCallbacks(ILookActions instance)
        {
            if (m_Wrapper.m_LookActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="LookActions.AddCallbacks(ILookActions)" />
        /// <seealso cref="LookActions.RemoveCallbacks(ILookActions)" />
        /// <seealso cref="LookActions.UnregisterCallbacks(ILookActions)" />
        public void SetCallbacks(ILookActions instance)
        {
            foreach (var item in m_Wrapper.m_LookActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_LookActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="LookActions" /> instance referencing this action map.
    /// </summary>
    public LookActions @Look => new LookActions(this);

    // Orbit
    private readonly InputActionMap m_Orbit;
    private List<IOrbitActions> m_OrbitActionsCallbackInterfaces = new List<IOrbitActions>();
    private readonly InputAction m_Orbit_RightClick;
    /// <summary>
    /// Provides access to input actions defined in input action map "Orbit".
    /// </summary>
    public struct OrbitActions
    {
        private @CameraControls m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public OrbitActions(@CameraControls wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "Orbit/RightClick".
        /// </summary>
        public InputAction @RightClick => m_Wrapper.m_Orbit_RightClick;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_Orbit; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="OrbitActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(OrbitActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="OrbitActions" />
        public void AddCallbacks(IOrbitActions instance)
        {
            if (instance == null || m_Wrapper.m_OrbitActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_OrbitActionsCallbackInterfaces.Add(instance);
            @RightClick.started += instance.OnRightClick;
            @RightClick.performed += instance.OnRightClick;
            @RightClick.canceled += instance.OnRightClick;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="OrbitActions" />
        private void UnregisterCallbacks(IOrbitActions instance)
        {
            @RightClick.started -= instance.OnRightClick;
            @RightClick.performed -= instance.OnRightClick;
            @RightClick.canceled -= instance.OnRightClick;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="OrbitActions.UnregisterCallbacks(IOrbitActions)" />.
        /// </summary>
        /// <seealso cref="OrbitActions.UnregisterCallbacks(IOrbitActions)" />
        public void RemoveCallbacks(IOrbitActions instance)
        {
            if (m_Wrapper.m_OrbitActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="OrbitActions.AddCallbacks(IOrbitActions)" />
        /// <seealso cref="OrbitActions.RemoveCallbacks(IOrbitActions)" />
        /// <seealso cref="OrbitActions.UnregisterCallbacks(IOrbitActions)" />
        public void SetCallbacks(IOrbitActions instance)
        {
            foreach (var item in m_Wrapper.m_OrbitActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_OrbitActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="OrbitActions" /> instance referencing this action map.
    /// </summary>
    public OrbitActions @Orbit => new OrbitActions(this);

    // Zoom
    private readonly InputActionMap m_Zoom;
    private List<IZoomActions> m_ZoomActionsCallbackInterfaces = new List<IZoomActions>();
    private readonly InputAction m_Zoom_Scroll;
    /// <summary>
    /// Provides access to input actions defined in input action map "Zoom".
    /// </summary>
    public struct ZoomActions
    {
        private @CameraControls m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public ZoomActions(@CameraControls wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "Zoom/Scroll".
        /// </summary>
        public InputAction @Scroll => m_Wrapper.m_Zoom_Scroll;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_Zoom; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="ZoomActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(ZoomActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="ZoomActions" />
        public void AddCallbacks(IZoomActions instance)
        {
            if (instance == null || m_Wrapper.m_ZoomActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ZoomActionsCallbackInterfaces.Add(instance);
            @Scroll.started += instance.OnScroll;
            @Scroll.performed += instance.OnScroll;
            @Scroll.canceled += instance.OnScroll;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="ZoomActions" />
        private void UnregisterCallbacks(IZoomActions instance)
        {
            @Scroll.started -= instance.OnScroll;
            @Scroll.performed -= instance.OnScroll;
            @Scroll.canceled -= instance.OnScroll;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="ZoomActions.UnregisterCallbacks(IZoomActions)" />.
        /// </summary>
        /// <seealso cref="ZoomActions.UnregisterCallbacks(IZoomActions)" />
        public void RemoveCallbacks(IZoomActions instance)
        {
            if (m_Wrapper.m_ZoomActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="ZoomActions.AddCallbacks(IZoomActions)" />
        /// <seealso cref="ZoomActions.RemoveCallbacks(IZoomActions)" />
        /// <seealso cref="ZoomActions.UnregisterCallbacks(IZoomActions)" />
        public void SetCallbacks(IZoomActions instance)
        {
            foreach (var item in m_Wrapper.m_ZoomActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ZoomActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="ZoomActions" /> instance referencing this action map.
    /// </summary>
    public ZoomActions @Zoom => new ZoomActions(this);

    // Pan
    private readonly InputActionMap m_Pan;
    private List<IPanActions> m_PanActionsCallbackInterfaces = new List<IPanActions>();
    private readonly InputAction m_Pan_MiddleClick;
    /// <summary>
    /// Provides access to input actions defined in input action map "Pan".
    /// </summary>
    public struct PanActions
    {
        private @CameraControls m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public PanActions(@CameraControls wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "Pan/MiddleClick".
        /// </summary>
        public InputAction @MiddleClick => m_Wrapper.m_Pan_MiddleClick;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_Pan; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="PanActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(PanActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="PanActions" />
        public void AddCallbacks(IPanActions instance)
        {
            if (instance == null || m_Wrapper.m_PanActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PanActionsCallbackInterfaces.Add(instance);
            @MiddleClick.started += instance.OnMiddleClick;
            @MiddleClick.performed += instance.OnMiddleClick;
            @MiddleClick.canceled += instance.OnMiddleClick;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="PanActions" />
        private void UnregisterCallbacks(IPanActions instance)
        {
            @MiddleClick.started -= instance.OnMiddleClick;
            @MiddleClick.performed -= instance.OnMiddleClick;
            @MiddleClick.canceled -= instance.OnMiddleClick;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="PanActions.UnregisterCallbacks(IPanActions)" />.
        /// </summary>
        /// <seealso cref="PanActions.UnregisterCallbacks(IPanActions)" />
        public void RemoveCallbacks(IPanActions instance)
        {
            if (m_Wrapper.m_PanActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="PanActions.AddCallbacks(IPanActions)" />
        /// <seealso cref="PanActions.RemoveCallbacks(IPanActions)" />
        /// <seealso cref="PanActions.UnregisterCallbacks(IPanActions)" />
        public void SetCallbacks(IPanActions instance)
        {
            foreach (var item in m_Wrapper.m_PanActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PanActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="PanActions" /> instance referencing this action map.
    /// </summary>
    public PanActions @Pan => new PanActions(this);

    // Recenter
    private readonly InputActionMap m_Recenter;
    private List<IRecenterActions> m_RecenterActionsCallbackInterfaces = new List<IRecenterActions>();
    private readonly InputAction m_Recenter_Space;
    /// <summary>
    /// Provides access to input actions defined in input action map "Recenter".
    /// </summary>
    public struct RecenterActions
    {
        private @CameraControls m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public RecenterActions(@CameraControls wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "Recenter/Space".
        /// </summary>
        public InputAction @Space => m_Wrapper.m_Recenter_Space;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_Recenter; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="RecenterActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(RecenterActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="RecenterActions" />
        public void AddCallbacks(IRecenterActions instance)
        {
            if (instance == null || m_Wrapper.m_RecenterActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_RecenterActionsCallbackInterfaces.Add(instance);
            @Space.started += instance.OnSpace;
            @Space.performed += instance.OnSpace;
            @Space.canceled += instance.OnSpace;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="RecenterActions" />
        private void UnregisterCallbacks(IRecenterActions instance)
        {
            @Space.started -= instance.OnSpace;
            @Space.performed -= instance.OnSpace;
            @Space.canceled -= instance.OnSpace;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="RecenterActions.UnregisterCallbacks(IRecenterActions)" />.
        /// </summary>
        /// <seealso cref="RecenterActions.UnregisterCallbacks(IRecenterActions)" />
        public void RemoveCallbacks(IRecenterActions instance)
        {
            if (m_Wrapper.m_RecenterActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="RecenterActions.AddCallbacks(IRecenterActions)" />
        /// <seealso cref="RecenterActions.RemoveCallbacks(IRecenterActions)" />
        /// <seealso cref="RecenterActions.UnregisterCallbacks(IRecenterActions)" />
        public void SetCallbacks(IRecenterActions instance)
        {
            foreach (var item in m_Wrapper.m_RecenterActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_RecenterActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="RecenterActions" /> instance referencing this action map.
    /// </summary>
    public RecenterActions @Recenter => new RecenterActions(this);

    // Select
    private readonly InputActionMap m_Select;
    private List<ISelectActions> m_SelectActionsCallbackInterfaces = new List<ISelectActions>();
    private readonly InputAction m_Select_MouseClick;
    /// <summary>
    /// Provides access to input actions defined in input action map "Select".
    /// </summary>
    public struct SelectActions
    {
        private @CameraControls m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public SelectActions(@CameraControls wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "Select/MouseClick".
        /// </summary>
        public InputAction @MouseClick => m_Wrapper.m_Select_MouseClick;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_Select; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="SelectActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(SelectActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="SelectActions" />
        public void AddCallbacks(ISelectActions instance)
        {
            if (instance == null || m_Wrapper.m_SelectActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SelectActionsCallbackInterfaces.Add(instance);
            @MouseClick.started += instance.OnMouseClick;
            @MouseClick.performed += instance.OnMouseClick;
            @MouseClick.canceled += instance.OnMouseClick;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="SelectActions" />
        private void UnregisterCallbacks(ISelectActions instance)
        {
            @MouseClick.started -= instance.OnMouseClick;
            @MouseClick.performed -= instance.OnMouseClick;
            @MouseClick.canceled -= instance.OnMouseClick;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="SelectActions.UnregisterCallbacks(ISelectActions)" />.
        /// </summary>
        /// <seealso cref="SelectActions.UnregisterCallbacks(ISelectActions)" />
        public void RemoveCallbacks(ISelectActions instance)
        {
            if (m_Wrapper.m_SelectActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="SelectActions.AddCallbacks(ISelectActions)" />
        /// <seealso cref="SelectActions.RemoveCallbacks(ISelectActions)" />
        /// <seealso cref="SelectActions.UnregisterCallbacks(ISelectActions)" />
        public void SetCallbacks(ISelectActions instance)
        {
            foreach (var item in m_Wrapper.m_SelectActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SelectActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="SelectActions" /> instance referencing this action map.
    /// </summary>
    public SelectActions @Select => new SelectActions(this);
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Look" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="LookActions.AddCallbacks(ILookActions)" />
    /// <seealso cref="LookActions.RemoveCallbacks(ILookActions)" />
    public interface ILookActions
    {
        /// <summary>
        /// Method invoked when associated input action "Mouse Delta" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMouseDelta(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Orbit" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="OrbitActions.AddCallbacks(IOrbitActions)" />
    /// <seealso cref="OrbitActions.RemoveCallbacks(IOrbitActions)" />
    public interface IOrbitActions
    {
        /// <summary>
        /// Method invoked when associated input action "Right Click" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnRightClick(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Zoom" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="ZoomActions.AddCallbacks(IZoomActions)" />
    /// <seealso cref="ZoomActions.RemoveCallbacks(IZoomActions)" />
    public interface IZoomActions
    {
        /// <summary>
        /// Method invoked when associated input action "Scroll" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnScroll(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Pan" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="PanActions.AddCallbacks(IPanActions)" />
    /// <seealso cref="PanActions.RemoveCallbacks(IPanActions)" />
    public interface IPanActions
    {
        /// <summary>
        /// Method invoked when associated input action "Middle Click" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMiddleClick(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Recenter" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="RecenterActions.AddCallbacks(IRecenterActions)" />
    /// <seealso cref="RecenterActions.RemoveCallbacks(IRecenterActions)" />
    public interface IRecenterActions
    {
        /// <summary>
        /// Method invoked when associated input action "Space" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSpace(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Select" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="SelectActions.AddCallbacks(ISelectActions)" />
    /// <seealso cref="SelectActions.RemoveCallbacks(ISelectActions)" />
    public interface ISelectActions
    {
        /// <summary>
        /// Method invoked when associated input action "Mouse Click" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMouseClick(InputAction.CallbackContext context);
    }
}
